// src/seeder.rs
use crate::config::SeedingTask;
use crate::db::{DbClient, DbSchema};
use crate::entity_generator::{DataPools, EntityGenerator};
use crate::error::{AppError, AppResult};
use crate::gemini_analyzer::{ArchitecturalPlan, GeminiAnalyzer};
use console::style;
use indicatif::ProgressBar;
use petgraph::algo::toposort;
use petgraph::graphmap::DiGraphMap;
use serde_json::{json, Value};
use sqlx::Row;
use std::collections::{HashMap, HashSet};

pub struct Seeder {
    db_client: DbClient,
    schema: DbSchema,
}

impl Seeder {
    pub async fn new(db_client: DbClient) -> AppResult<Self> {
        println!("üîé –ß–∏—Ç–∞—é —Å—Ö–µ–º—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...");
        let schema = db_client.fetch_schema().await?;
        Ok(Self { db_client, schema })
    }

    pub async fn run(&self, config: &crate::config::AppConfig) -> AppResult<()> {
        let gemini_key = std::env::var("GEMINI_API_KEY")
            .map_err(|_| AppError::Custom("–ó–º—ñ–Ω–Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ GEMINI_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞".to_string()))?;
        
        let model = config.gemini.as_ref().map_or("gemini-1.5-flash-latest".to_string(), |g| g.model.clone());
        let lang = config.generation.as_ref().map_or("en", |g| &g.language);
        
        let analyzer = GeminiAnalyzer::new(gemini_key, model);

        println!("üß† Gemini —Ä–æ–∑—Ä–æ–±–ª—è—î –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–Ω–∏–π –ø–ª–∞–Ω (–º–æ–≤–∞: {})...", lang);
        
        let plan = config.plan.as_ref().ok_or_else(|| AppError::Custom("–°–µ–∫—Ü—ñ—è [[seeding_plan]] –≤—ñ–¥—Å—É—Ç–Ω—è –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó".to_string()))?;

        let all_table_names: HashSet<&str> = plan.iter().map(|t| t.table.as_str()).collect();
        let schemas_for_analysis: Vec<_> = self.schema.tables.values().filter(|t| all_table_names.contains(t.name.as_str())).collect();
        if schemas_for_analysis.is_empty() {
            println!("{}", style("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü—å –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –≤ —Å—Ö–µ–º—ñ –ë–î. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ `seeding_plan` –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó.").yellow());
            return Ok(());
        }
        
        let architectural_plan = analyzer.get_architectural_plan(&schemas_for_analysis, lang).await?;
        println!("‚úÖ –ü–ª–∞–Ω –æ—Ç—Ä–∏–º–∞–Ω–æ! –¢–µ–º–∞: {}", style(&architectural_plan.theme).green());

        // --- –§–ê–ó–ê 2: –ü–†–ï-–ì–ï–ù–ï–†–ê–¶–Ü–Ø –ü–£–õ–Ü–í ---
        let mut data_pools = DataPools::new();
        if !architectural_plan.data_pools.is_empty() {
            println!("üíß –ó–∞–ø–æ–≤–Ω—é—é –ø—É–ª–∏ –¥–∞–Ω–∏—Ö –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Gemini...");
            let bar = ProgressBar::new(architectural_plan.data_pools.len() as u64);
            for (pool_name, pool_config) in &architectural_plan.data_pools {
                bar.set_message(format!("–ì–µ–Ω–µ—Ä—É—é –ø—É–ª '{}'", pool_name));
                let pool_data = analyzer.get_pool_data(&pool_config.gemini_prompt_for_pool).await?;
                let pool_values: Vec<Value> = pool_data.into_iter().map(Value::String).collect();
                data_pools.insert(pool_name.clone(), pool_values);
                bar.inc(1);
            }
            bar.finish_with_message("‚úÖ –ü—É–ª–∏ –¥–∞–Ω–∏—Ö –∑–∞–ø–æ–≤–Ω–µ–Ω–æ!");
        }

        // --- –§–ê–ó–ê 3: –ú–ê–°–û–í–ê –ì–ï–ù–ï–†–ê–¶–Ü–Ø –¢–ê –í–°–¢–ê–í–ö–ê ---
        let entity_generator = EntityGenerator::new();
        let mut generated_pks: DataPools = HashMap::new();
        
        let graph = self.build_dependency_graph(&architectural_plan);
        let sorted_entities = toposort(&graph, None).map_err(|_| AppError::CyclicDependency)?;

        println!("\nüöÄ –ü–æ—Ä—è–¥–æ–∫ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Å—É—Ç–Ω–æ—Å—Ç–µ–π –≤–∏–∑–Ω–∞—á–µ–Ω–æ:");
        for (i, entity_name) in sorted_entities.iter().enumerate() {
            println!("   {}. {}", i + 1, style(entity_name).cyan());
        }

        for entity_name in sorted_entities {
            if let Some(entity_template) = architectural_plan.entity_templates.iter().find(|e| e.entity_name == *entity_name) {
                if let Some(task) = plan.iter().find(|t| t.table == entity_template.target_table) {
                    println!("\nüå± –ó–∞–ø–æ–≤–Ω—é—é —Ç–∞–±–ª–∏—Ü—é '{}' ({} —Ä—è–¥–∫—ñ–≤) —Å—É—Ç–Ω–æ—Å—Ç—è–º–∏ '{}'...", style(&task.table).bold(), task.rows, style(entity_name).cyan());
                    
                    let pks = self.seed_table(task, entity_template, &entity_generator, &data_pools, &generated_pks).await?;
                    if !pks.is_empty() {
                        generated_pks.insert(entity_template.target_table.clone(), pks);
                    }
                }
            }
        }
        
        println!("\n‚ú® –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
        Ok(())
    }

    async fn seed_table(
        &self,
        task: &SeedingTask,
        template: &crate::gemini_analyzer::EntityTemplate,
        generator: &EntityGenerator,
        pools: &DataPools,
        pks: &DataPools,
    ) -> AppResult<Vec<Value>> {
        let bar = ProgressBar::new(task.rows as u64);
        let mut generated_pks_for_this_table = Vec::new();
        
        let table_schema = self.schema.tables.get(&template.target_table)
            .ok_or_else(|| AppError::Custom(format!("–°—Ö–µ–º–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ '{}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞", template.target_table)))?;

        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ–ø–∏—Å –ø–µ—Ä–≤–∏–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
        let pk_field = template.fields.iter().find(|f| f.generator == "pk_hash" || f.generator == "pk_uuid");

        let mut tx = self.db_client.pool().begin().await?;
        for _ in 0..task.rows {
            let entity = generator.generate_entity(&template.fields, pools, pks)?;

            let columns: Vec<String> = entity.keys().cloned().collect();
            let values: Vec<Value> = columns.iter().map(|k| entity.get(k).unwrap().clone()).collect();

            let column_names = columns.iter().map(|s| format!("\"{}\"", s)).collect::<Vec<_>>().join(", ");
            
            let placeholders: String = columns.iter().enumerate().map(|(i, col_name)| {
                let placeholder_index = i + 1;
                let col_schema = table_schema.columns.iter().find(|c| &c.name == col_name);
                if let Some(schema) = col_schema {
                    match schema.data_type.as_str() {
                        "timestamp with time zone" | "timestamp without time zone" => format!("${}::timestamp", placeholder_index),
                        "date" => format!("${}::date", placeholder_index),
                        "uuid" => format!("${}::uuid", placeholder_index),
                        _ => format!("${}", placeholder_index),
                    }
                } else {
                    format!("${}", placeholder_index)
                }
            }).collect::<Vec<_>>().join(", ");
            
            let mut sql = format!("INSERT INTO \"{}\" ({}) VALUES ({})", template.target_table, column_names, placeholders);

            if let Some(pk_field) = pk_field {
                sql.push_str(&format!(" RETURNING \"{}\"", pk_field.column_name));
            }
            
            let mut query = sqlx::query(&sql);
            for val in values {
                match val {
                    Value::String(s) => { query = query.bind(s); }
                    Value::Number(n) => {
                        if let Some(i) = n.as_i64() { query = query.bind(i); }
                        else if let Some(f) = n.as_f64() { query = query.bind(f); }
                        else { query = query.bind(n.to_string()); }
                    }
                    Value::Bool(b) => {
                        let int_val: i32 = if b { 1 } else { 0 };
                        query = query.bind(int_val);
                    }
                    Value::Null => return Err(AppError::Custom("–°–ø—Ä–æ–±–∞ –ø—Ä–∏–≤'—è–∑–∞—Ç–∏ NULL.".to_string())),
                    _ => { query = query.bind(val); }
                }
            }
            
            // –í–ò–ü–†–ê–í–õ–ï–ù–û: –§—ñ–Ω–∞–ª—å–Ω–∞, –Ω–∞–¥—ñ–π–Ω–∞ –ª–æ–≥—ñ–∫–∞ —á–∏—Ç–∞–Ω–Ω—è PK
            if let Some(pk_field_template) = pk_field {
                let row = query.fetch_one(&mut *tx).await?;

                // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å—Ö–µ–º—É –¥–ª—è –ø–µ—Ä–≤–∏–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –π–æ–≥–æ —Ç–∏–ø
                let pk_col_schema = table_schema.columns.iter().find(|c| c.name == pk_field_template.column_name)
                    .ok_or_else(|| AppError::Custom(format!("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å—Ö–µ–º—É –¥–ª—è PK –∫–æ–ª–æ–Ω–∫–∏ {}", pk_field_template.column_name)))?;

                // –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–æ —á–∏—Ç–∞—î–º–æ PK –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –π–æ–≥–æ —Ç–∏–ø—É –¥–∞–Ω–∏—Ö
                let pk_val: Value = match pk_col_schema.data_type.as_str() {
                    "character varying" | "text" | "varchar" | "uuid" => {
                        let val: String = row.get(0); // –ß–∏—Ç–∞—î–º–æ —è–∫ —Ä—è–¥–æ–∫
                        Value::String(val)
                    },
                    "integer" | "smallint" => {
                        let val: i32 = row.get(0); // –ß–∏—Ç–∞—î–º–æ —è–∫ i32
                        json!(val)
                    },
                    "bigint" => {
                        let val: i64 = row.get(0); // –ß–∏—Ç–∞—î–º–æ —è–∫ i64
                        json!(val)
                    }
                    _ => return Err(AppError::Custom(format!("–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ç–∏–ø –¥–∞–Ω–∏—Ö –¥–ª—è –ø–µ—Ä–≤–∏–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞: {}", pk_col_schema.data_type)))
                };
                
                generated_pks_for_this_table.push(pk_val);
            } else {
                query.execute(&mut *tx).await?;
            }
            bar.inc(1);
        }
        tx.commit().await?;

        bar.finish_with_message("–ó–∞–≤–µ—Ä—à–µ–Ω–æ");
        Ok(generated_pks_for_this_table)
    }

    fn build_dependency_graph<'a>(&self, plan: &'a ArchitecturalPlan) -> DiGraphMap<&'a str, ()> {
        let mut graph: DiGraphMap<&'a str, ()> = DiGraphMap::new();

        // –î–æ–¥–∞—î–º–æ –≤—Å—ñ —Å—É—Ç–Ω–æ—Å—Ç—ñ —è–∫ –≤—É–∑–ª–∏
        for template in &plan.entity_templates {
            graph.add_node(template.entity_name.as_str());
        }
        
        // –î–æ–¥–∞—î–º–æ —Ä–µ–±—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ FK
        for template in &plan.entity_templates {
            for field in &template.fields {
                if field.generator == "fk" {
                    if let Some(parent_table_name) = field.params.get("references").and_then(|v| v.as_str()) {
                        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫—É —Å—É—Ç–Ω—ñ—Å—Ç—å –∑–∞ –Ω–∞–∑–≤–æ—é —Ç–∞–±–ª–∏—Ü—ñ
                        if let Some(parent_template) = plan.entity_templates.iter().find(|e| e.target_table == parent_table_name) {
                            graph.add_edge(
                                parent_template.entity_name.as_str(),
                                template.entity_name.as_str(),
                                (),
                            );
                        }
                    }
                }
            }
        }
        graph
    }
}