// src/main.rs
mod config;
mod db;
mod entity_generator;
mod error;
mod gemini_analyzer;
mod interactive;
mod seeder;

use crate::config::AppConfig;
use crate::db::DbClient;
use crate::error::AppResult;
use crate::seeder::Seeder;
use clap::{Parser, Subcommand};
use console::style;

#[derive(Parser, Debug)]
#[command(author, version, about = "–£—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ë–î", long_about = None)]
struct Cli {
    #[command(subcommand)]
    command: Commands,

    #[arg(short, long, global = true, default_value = "config.toml")]
    config: String,
}

#[derive(Subcommand, Debug)]
enum Commands {
    /// –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ –ë–î –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–ª–∞–Ω—É –∑ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó (—Ä–µ–∂–∏–º '–ê—Ä—Ö—ñ—Ç–µ–∫—Ç–æ—Ä')
    File,
    /// –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–∞–±–ª–∏—Ü—å
    Interactive,
}

#[tokio::main]
async fn main() -> AppResult<()> {
    if let Err(e) = dotenvy::dotenv() {
        if !e.to_string().contains("No such file or directory") {
            eprintln!("{} –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env —Ñ–∞–π–ª—É: {}", style("[!]").yellow(), e);
        }
    }

    let cli = Cli::parse();

    println!("‚öôÔ∏è  –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑ '{}'...", &cli.config);
    // –†–æ–±–∏–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –º—É—Ç–∞–±–µ–ª—å–Ω–æ—é, —â–æ–± –º–æ–∂–Ω–∞ –±—É–ª–æ –∑–º—ñ–Ω–∏—Ç–∏ `plan`
    let mut config = AppConfig::from_file(&cli.config)?;

    println!("üîå –ü—ñ–¥–∫–ª—é—á–∞—é—Å—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...");
    let db_client = DbClient::new(&config.database.url).await?;
    println!("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ.");

    let seeder = Seeder::new(db_client).await?;

    match cli.command {
        Commands::File => {
            println!("\n‚ñ∂Ô∏è  –†–µ–∂–∏–º: –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª—É.");
            seeder.run(&config).await?;
        }
        Commands::Interactive => {
            println!("\n‚ñ∂Ô∏è  –†–µ–∂–∏–º: —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π.");
            let default_rows = config.default_rows.unwrap_or(10);
            
            // –í–∏–∫–ª–∏–∫–∞—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
            let graph = seeder.build_full_dependency_graph();
            let plan = interactive::run_interactive_mode(seeder.schema(), &graph, default_rows)?;

            if !plan.is_empty() {
                // –û–Ω–æ–≤–ª—é—î–º–æ –ø–ª–∞–Ω –≤ —ñ—Å–Ω—É—é—á—ñ–π –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
                config.plan = Some(plan);
                seeder.run(&config).await?;
            }
        }
    }

    Ok(())
}