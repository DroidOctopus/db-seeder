// src/main.rs
mod config;
mod db;
mod entity_generator;
mod error;
mod gemini_analyzer;
mod seeder;

use crate::config::AppConfig;
use crate::db::DbClient;
use crate::error::AppResult;
use crate::seeder::Seeder;
use clap::Parser;
use console::style;

#[derive(Parser, Debug)]
#[command(author, version, about = "–£—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ë–î –≤ —Ä–µ–∂–∏–º—ñ 'Gemini —è–∫ –∞—Ä—Ö—ñ—Ç–µ–∫—Ç–æ—Ä'", long_about = None)]
struct Cli {
    /// –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    #[arg(short, long, default_value = "config.toml")]
    config: String,
}

#[tokio::main]
async fn main() -> AppResult<()> {
    if let Err(e) = dotenvy::dotenv() {
        if !e.to_string().contains("No such file or directory") {
            eprintln!("{} –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env —Ñ–∞–π–ª—É: {}", style("[!]").yellow(), e);
        }
    }

    let cli = Cli::parse();

    println!("‚öôÔ∏è  –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑ '{}'...", &cli.config);
    let config = AppConfig::from_file(&cli.config)?;

    println!("üîå –ü—ñ–¥–∫–ª—é—á–∞—é—Å—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...");
    let db_client = DbClient::new(&config.database.url).await?;
    println!("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ.");

    // –í–ò–ü–†–ê–í–õ–ï–ù–û: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Seeder –∑ –æ–¥–Ω–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
    let seeder = Seeder::new(db_client).await?;

    println!("\n‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫–∞—é –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–ª–∞–Ω—É –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...");
    if config.plan.is_some() {
        seeder.run(&config).await?;
    } else {
        println!("{}", style("–£ —Ñ–∞–π–ª—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–µ–∫—Ü—ñ—ó [[seeding_plan]].").yellow());
    }

    Ok(())
}